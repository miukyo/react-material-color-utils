name: Sync & Publish TypeScript Package

on:
  workflow_dispatch: # Allows manual trigger
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC
  push:
    branches:
      - main # Or your main branch for new changes in *your* repo

jobs:
  sync_material_color_utilities:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Your Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has write permissions to *this* repo

      - name: Clone Material Color Utilities
        run: |
          git clone https://github.com/material-foundation/material-color-utilities.git temp_mcu_repo

      - name: Copy TypeScript Folder to Root and Clean Up
        run: |
          # Remove existing files/dirs in your repo root (except .git)
          # This ensures a clean copy and removes files no longer present in source
          find . -maxdepth 1 -mindepth 1 -not -name '.git' -not -name 'temp_mcu_repo' -not -name '.github' -exec rm -rf {} +

          # Copy the contents of the typescript folder to your repo root
          cp -R temp_mcu_repo/typescript/. .

          # Clean up the cloned repo
          rm -rf temp_mcu_repo

      - name: Update package.json name
        run: |
          jq '.name = "react-material-color-utils"' package.json > package.json.tmp && mv package.json.tmp package.json

      - name: Update tsconfig.json compilerOptions.noUnusedLocals
        run: |
          jq '.compilerOptions.noUnusedLocals = false' tsconfig.json > tsconfig.json.tmp && mv tsconfig.json.tmp tsconfig.json

      - name: Apply patches
        run: |
          git apply --reject --whitespace=fix .github/patches/*.patch

      - name: Get latest version from npm
        id: get_latest_version
        run: |
          LATEST=$(npm view react-material-color-utils version || echo "0.0.0")
          echo "latest_version=$LATEST" >> $GITHUB_OUTPUT

      - name: Auto-increment version with suffix
        run: |
          CURRENT=$(jq -r .version package.json)
          BASE=$(echo "$CURRENT" | cut -d'-' -f1)
          LATEST="${{ steps.get_latest_version.outputs.latest_version }}"
          if [[ "$LATEST" =~ $BASE-([0-9]+)$ ]]; then
            SUFFIX=$((BASH_REMATCH[1]+1))
          else
            SUFFIX=1
          fi
          NEW_VERSION="$BASE-$SUFFIX"
          jq --arg v "$NEW_VERSION" '.version = $v' package.json > package.json.tmp && mv package.json.tmp package.json

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions-bot@users.noreply.github.com"

      - name: Check for Changes
        id: git_status
        run: |
          git add .
          git diff --cached --exit-code || echo "changes=true" >> "$GITHUB_OUTPUT"
        continue-on-error: true # Allow subsequent steps to run even if no changes

      - name: Commit and Push if Changes
        if: steps.git_status.outputs.changes == 'true'
        run: |
          git commit -m "Sync: Update from material-color-utilities/typescript and set package name"
          git push origin ${{ github.ref_name }} # Pushes to the same branch that triggered the workflow
  build_and_publish:
      needs: sync_material_color_utilities # This job depends on the sync being successful
      runs-on: ubuntu-latest
      # Only publish if there were changes pushed by the sync job, or if manually triggered
      if: needs.sync_material_color_utilities.outputs.changes == 'true' || github.event_name == 'workflow_dispatch'

      steps:
        - name: Checkout Your Repository (for build/publish)
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            registry-url: 'https://registry.npmjs.org'

        - name: Install dependencies
          run: npm install

        - name: Build TypeScript package
          run: npm run build

        - name: Publish to npm
          run: npm publish --access public
          env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
